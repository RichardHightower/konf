{
  "name": "Konf",
  "tagline": "Java configuration library that uses Javascript configuration files.",
  "body": "[Konf Website](http://advantageous.github.io/konf/)\r\n\r\n# Konf - Typed Java Config system \r\nJava configuration library similar in concept to TypeSafe config,\r\nbut uses full JavaScript, YAML or JSON for configuration.\r\n\r\nUses JavaScript/JSON/YAML as config for Java. \r\n\r\nYou can use full JavaScript for configuration as long as you define a\r\nvariable called `config` that results in a JavaScript object which\r\nequates to a Java map.\r\n\r\n## Using Konf on your project\r\n\r\nKonf is in the [public maven repo](http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.advantageous.konf%22).\r\n\r\n### Using konf from maven\r\n```xml\r\n<dependency>\r\n    <groupId>io.advantageous.konf</groupId>\r\n    <artifactId>konf</artifactId>\r\n    <version>1.0.0.RELEASE</version>\r\n</dependency>\r\n```\r\n\r\n### Using konf from gradle\r\n```java\r\ncompile 'io.advantageous.konf:konf:1.0.0.RELEASE'\r\n```\r\n\r\n### Using konf from scala sbt\r\n```java\r\nlibraryDependencies += \"io.advantageous.konf\" % \"konf\" % \"1.0.0.RELEASE\"\r\n```\r\n\r\n### Using konf from clojure leiningen\r\n```lisp\r\n[io.advantageous.konf/konf \"1.0.0.RELEASE\"]\r\n```\r\n\r\nHere is an example config for JavaScript. \r\n\r\nKonf expects the conf variable to be set to a JavaScript object with \r\nproperties.\r\n\r\n#### JavaScript based configuration for Java\r\n```javascript\r\nvar config = {\r\n\r\n  myUri: uri(\"http://host:9000/path?foo=bar\"),\r\n\r\n  someKey: {\r\n    nestedKey: 234,\r\n    other: \"this text\"\r\n  }\r\n\r\n};\r\n\r\n```\r\n\r\nThe interface for Konf is Config.\r\nYou can get a sub Config from Config (`getConfig(path)`).\r\nThe `path` is always in dot notation (`this.that.foo.bar`).\r\nYou can also use:\r\n* `getInt(path)` \r\n* `getLong(path)`\r\n* `getDouble(path)`\r\n* `getString(path)`\r\n* `getStringList(path)` gets a list of strings\r\n* `getConfig(path)` gets a sub-config.\r\n* `getMap(path)` gets a map which is a sub-config.\r\n* `getConfigList(path)` gets a list of configs at the location specified.\r\n\r\n`getMap` works with JavaScript objects. `getStringList` and `getConfigList` works\r\nwith JavaScript array of string and a JavaScript array of JavaScript objects. \r\n\r\nNot you get an exception if the `path` requested is not found. \r\nUse `hasPath(path)` if you think the config path might be missing. \r\n\r\nHere is the full interface.\r\n\r\n#### Config interface\r\n```java\r\npublic interface Config {\r\n\r\n    /** Get string at location. */\r\n    String getString(String path);\r\n\r\n    /** Checks to see if config has the path specified. */\r\n    boolean hasPath(String path);\r\n\r\n    /** Get int at location. */\r\n    int getInt(String path);\r\n\r\n    /** Get float at location. */\r\n    float getFloat(String path);\r\n\r\n    /** Get double at location. */\r\n    double getDouble(String path);\r\n\r\n    /** Get long at location. */\r\n    long getLong(String path);\r\n\r\n    /** Get list of strings at location. */\r\n    List<String> getStringList(String path);\r\n\r\n    /** Get map at location. */\r\n    Map<String, Object> getMap(String path);\r\n\r\n    /** Get a sub-config at location. */\r\n    Config getConfig(String path);\r\n\r\n    /** Get list of sub-configs at location. */\r\n    List<Config> getConfigList(String path);\r\n\r\n    /**  Get a single POJO out of config at path. */\r\n    <T> T get(String path, Class<T> type);\r\n\r\n    /**  Get a list of POJOs. */\r\n    <T> List<T> getList(String path, Class<T> componentType);\r\n}\r\n\r\n```\r\n\r\n\r\nThe `getX` methods work like you would expect. Given this config file.\r\n\r\n#### Sample config for testing and showing how config works\r\n\r\n```javascript\r\nvar config = {\r\n\r\n  myUri: uri(\"http://host:9000/path?foo=bar\"),\r\n\r\n  someKey: {\r\n    nestedKey: 234,\r\n    other: \"this text\"\r\n  },\r\n\r\n  int1: 1,\r\n  float1: 1.0,\r\n  double1: 1.0,\r\n  long1: 1,\r\n  string1: \"rick\",\r\n  stringList: ['Foo', 'Bar'],\r\n  configInner: {\r\n    int2: 2,\r\n    float2: 2.0\r\n  },\r\n  uri: uri(\"http://localhost:8080/foo\"),\r\n  myClass: \"java.lang.Object\",\r\n  myURI: \"http://localhost:8080/foo\",\r\n  employee: {\"id\": 123, \"name\": \"Geoff\"},\r\n  employees: [\r\n    {id: 123, \"name\": \"Geoff\"},\r\n    {id: 456, \"name\": \"Rick\"},\r\n    {id: 789, 'name': \"Paul\"}\r\n  ]\r\n};\r\n\r\n```\r\n\r\nWe can do the following operations. \r\n\r\nFirst we load the config.\r\n\r\n#### Loading the config.\r\n\r\n```java\r\n\r\n    private Config config;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        config = ConfigLoader.load(\"test-config.js\");\r\n    }\r\n```\r\n\r\nThen we show reading basic types with the `config` object using `getX`.\r\n\r\n#### Reading basic types from config\r\n\r\n```java\r\n    @Test\r\n    public void testSimple() throws Exception {\r\n\r\n        //getInt\r\n        assertEquals(1, config.getInt(\"int1\"));\r\n        \r\n        //getStringList\r\n        assertEquals(asList(\"Foo\", \"Bar\"), \r\n               config.getStringList(\"stringList\"));\r\n               \r\n        //getString       \r\n        assertEquals(\"rick\", config.getString(\"string1\"));\r\n        \r\n        //getDouble\r\n        assertEquals(1.0, config.getDouble(\"double1\"), 0.001);\r\n        \r\n        //getLong\r\n        assertEquals(1L, config.getLong(\"long1\"));\r\n        \r\n        //getFloat\r\n        assertEquals(1.0f, config.getFloat(\"float1\"), 0.001);\r\n        \r\n        //Basic JDK value types are supported like class.\r\n        assertEquals(Object.class, config.get(\"myClass\", Class.class));\r\n        \r\n        //Basic JDK value types are supported like URI.\r\n        assertEquals(URI.create(\"http://localhost:8080/foo\"), \r\n                config.get(\"myURI\", URI.class));\r\n                \r\n        assertEquals(URI.create(\"http://localhost:8080/foo\"), \r\n                config.get(\"uri\", URI.class));\r\n                \r\n    }\r\n\r\n```\r\n\r\nYou can work with nested properties as well.\r\n\r\n#### Reading a nested config from the config\r\n\r\n```java\r\n    @Test\r\n    public void testGetConfig() throws Exception {\r\n        //Read nested config.\r\n        final Config configInner = config.getConfig(\"configInner\");\r\n        assertEquals(2, configInner.getInt(\"int2\"));\r\n        assertEquals(2.0f, configInner.getFloat(\"float2\"), 0.001);\r\n    }\r\n\r\n    @Test\r\n    public void testGetMap() throws Exception {\r\n        //Read nested config as a Java map.\r\n        final Map<String, Object> map = config.getMap(\"configInner\");\r\n        assertEquals(2, (int) map.get(\"int2\"));\r\n        assertEquals(2.0f, (double) map.get(\"float2\"), 0.001);\r\n    }\r\n```\r\n\r\nYou can read deeply nested config items as well by specifying the \r\nproperty path using dot notation. \r\n    \r\n#### Reading nested properties with dot notation from config\r\n\r\n\r\n```java\r\n    @Test\r\n    public void testSimplePath() throws Exception {\r\n\r\n        assertTrue(config.hasPath(\"configInner.int2\"));\r\n        assertFalse(config.hasPath(\"configInner.foo.bar\"));\r\n        assertEquals(2, config.getInt(\"configInner.int2\"));\r\n        assertEquals(2.0f, config.getFloat(\"configInner.float2\"), 0.001);\r\n    }\r\n```\r\n\r\nYou can also read POJOs directly out of the config file.\r\n\r\n#### Reading a pojo directly out of the config file\r\n```java\r\n\r\n    @Test\r\n    public void testReadClass() throws Exception {\r\n        final Employee employee = config.get(\"employee\", Employee.class);\r\n        assertEquals(\"Geoff\", employee.name);\r\n        assertEquals(\"123\", employee.id);\r\n    }\r\n\r\n```\r\n\r\nYou can read a list of POJOs at once.\r\n\r\n#### Reading a pojo list directly out of the config file\r\n```java\r\n\r\n    @Test\r\n    public void testReadListOfClass() throws Exception {\r\n        final List<Employee> employees = config.getList(\"employees\", Employee.class);\r\n        assertEquals(\"Geoff\", employees.get(0).name);\r\n        assertEquals(\"123\", employees.get(0).id);\r\n    }\r\n```\r\n\r\nYou can also read a list of config objects out of the config as well.\r\n#### Reading a config list directly out of the config file\r\n```java\r\n\r\n    @Test\r\n    public void testReadListOfConfig() throws Exception {\r\n        final List<Config> employees = config.getConfigList(\"employees\");\r\n        assertEquals(\"Geoff\", employees.get(0).getString(\"name\"));\r\n        assertEquals(\"123\", employees.get(0).getString(\"id\"));\r\n    }\r\n ```\r\n \r\n ## Using Config with YAML\r\n \r\n First include a YAML to object parser like [YAML Beans](https://github.com/EsotericSoftware/yamlbeans)\r\n or a library like this.\r\n \r\n #### Example YAML\r\n ```yaml\r\n   name: Nathan Sweet\r\n     age: 28\r\n     address: 4011 16th Ave S\r\n     phone numbers:\r\n      - name: Home\r\n        number: 206-555-5138\r\n      - name: Work\r\n        number: 425-555-2306\r\n ```\r\n \r\n#### Using Konf with YAML\r\n \r\n```java\r\n\r\n//Use YamlReader to load YAML file.\r\nYamlReader reader = new YamlReader(new FileReader(\"contact.yml\"));\r\n\r\n//Convert object read from YAML into Konf config\r\nConfig config = ConfigLoader.loadFromObject(reader.read());\r\n\r\n//Now you have strongly typed access to fields\r\nString address = config.getString(\"address\");\r\n```\r\n\r\nYou can also read Pojos from anywhere in the YAML file as well as \r\nsub configs. \r\n\r\n\r\n## You can also use Konf with JSON using Boon\r\n\r\nSee [Boon](https://github.com/advantageous/boon) JSON parser project,\r\nand [Boon in five minutes](https://github.com/boonproject/boon/wiki/Boon-JSON-in-five-minutes)\r\n\r\n#### Using Konf with JSON\r\n\r\n```java\r\nObjectMapper mapper =  JsonFactory.create();\r\n\r\n\r\n/* Convert object read from YAML into Konf config.\r\n  'src' can be File, InputStream, Reader, String. */\r\nConfig config = ConfigLoader.loadFromObject(mapper.fromJson(src));\r\n\r\n\r\n//Now you have strongly typed access to fields\r\nString address = config.getString(\"address\");\r\n\r\n```\r\n\r\nBoon supports LAX JSON (Json with comments, and you do not need to quote\r\nthe field).\r\n\r\n\r\nIf you like our configuration project, please try our \r\n[Reactive Java project](https://github.com/advantageous/reakt)\r\nor our [Actor based microservices lib](https://github.com/advantageous/qbit).\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}