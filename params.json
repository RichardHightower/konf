{
  "name": "Konf",
  "tagline": "Java configuration library that uses Javascript configuration files.",
  "body": "# Konf - Typed Java config system \r\nJava configuration library similar in concept to TypeSafe but uses full \r\nJavaScript for configuration.\r\n\r\nUses JavaScript/JSON as config for Java. \r\n\r\nYou can use full JavaScript for configuration.\r\n\r\n\r\n#### JavaScript based configuration for Java\r\n```javascript\r\nvar config = {\r\n\r\n  myUri: uri(\"http://host:9000/path?foo=bar\"),\r\n\r\n  someKey: {\r\n    nestedKey: 234,\r\n    other: \"this text\"\r\n  }\r\n\r\n};\r\n\r\n```\r\n\r\n\r\n#### Config interface\r\n```java\r\npublic interface Config {\r\n\r\n    /** Get string at location. */\r\n    String getString(String path);\r\n\r\n    /** Checks to see if config has the path specified. */\r\n    boolean hasPath(String path);\r\n\r\n    /** Get int at location. */\r\n    int getInt(String path);\r\n\r\n    /** Get float at location. */\r\n    float getFloat(String path);\r\n\r\n    /** Get double at location. */\r\n    double getDouble(String path);\r\n\r\n    /** Get long at location. */\r\n    long getLong(String path);\r\n\r\n    /** Get list of strings at location. */\r\n    List<String> getStringList(String path);\r\n\r\n    /** Get map at location. */\r\n    Map<String, Object> getMap(String path);\r\n\r\n    /** Get a sub-config at location. */\r\n    Config getConfig(String path);\r\n\r\n    /** Get list of sub-configs at location. */\r\n    List<Config> getConfigList(String path);\r\n\r\n    /**  Get a single POJO out of config at path. */\r\n    <T> T get(String path, Class<T> type);\r\n\r\n    /**  Get a list of POJOs. */\r\n    <T> List<T> getList(String path, Class<T> componentType);\r\n}\r\n\r\n```\r\n\r\n\r\nThe `getX` methods work like you would expect. Given this config file.\r\n\r\n#### Sample config for testing and showing how config works\r\n\r\n```javascript\r\nvar config = {\r\n\r\n  myUri: uri(\"http://host:9000/path?foo=bar\"),\r\n\r\n  someKey: {\r\n    nestedKey: 234,\r\n    other: \"this text\"\r\n  },\r\n\r\n  int1: 1,\r\n  float1: 1.0,\r\n  double1: 1.0,\r\n  long1: 1,\r\n  string1: \"rick\",\r\n  stringList: ['Foo', 'Bar'],\r\n  configInner: {\r\n    int2: 2,\r\n    float2: 2.0\r\n  },\r\n  uri: uri(\"http://localhost:8080/foo\"),\r\n  myClass: \"java.lang.Object\",\r\n  myURI: \"http://localhost:8080/foo\",\r\n  employee: {\"id\": 123, \"name\": \"Geoff\"},\r\n  employees: [\r\n    {id: 123, \"name\": \"Geoff\"},\r\n    {id: 456, \"name\": \"Rick\"},\r\n    {id: 789, 'name': \"Paul\"}\r\n  ]\r\n};\r\n\r\n```\r\n\r\nFirst we load the config.\r\n\r\n#### Loading the config.\r\n\r\n```java\r\n\r\n    private Config config;\r\n\r\n    @Before\r\n    public void setUp() throws Exception {\r\n        config = ConfigLoader.load(\"test-config.js\");\r\n    }\r\n```\r\n\r\nThen we show reading basic types with the `config` object using `getX`.\r\n\r\n#### Reading basic types\r\n\r\n```java\r\n    @Test\r\n    public void testSimple() throws Exception {\r\n\r\n        //getInt\r\n        assertEquals(1, config.getInt(\"int1\"));\r\n        \r\n        //getStringList\r\n        assertEquals(asList(\"Foo\", \"Bar\"), \r\n               config.getStringList(\"stringList\"));\r\n               \r\n        //getString       \r\n        assertEquals(\"rick\", config.getString(\"string1\"));\r\n        \r\n        //getDouble\r\n        assertEquals(1.0, config.getDouble(\"double1\"), 0.001);\r\n        \r\n        //getLong\r\n        assertEquals(1L, config.getLong(\"long1\"));\r\n        \r\n        //getFloat\r\n        assertEquals(1.0f, config.getFloat(\"float1\"), 0.001);\r\n        \r\n        //Basic JDK value types are supported like class.\r\n        assertEquals(Object.class, config.get(\"myClass\", Class.class));\r\n        \r\n        //Basic JDK value types are supported like URI.\r\n        assertEquals(URI.create(\"http://localhost:8080/foo\"), \r\n                config.get(\"myURI\", URI.class));\r\n                \r\n        assertEquals(URI.create(\"http://localhost:8080/foo\"), \r\n                config.get(\"uri\", URI.class));\r\n                \r\n    }\r\n\r\n```\r\n\r\nYou can work with nested properties as well.\r\n\r\n#### Reading a nested config\r\n\r\n```java\r\n    @Test\r\n    public void testGetConfig() throws Exception {\r\n        //Read nested config.\r\n        final Config configInner = config.getConfig(\"configInner\");\r\n        assertEquals(2, configInner.getInt(\"int2\"));\r\n        assertEquals(2.0f, configInner.getFloat(\"float2\"), 0.001);\r\n    }\r\n\r\n    @Test\r\n    public void testGetMap() throws Exception {\r\n        //Read nested config as a Java map.\r\n        final Map<String, Object> map = config.getMap(\"configInner\");\r\n        assertEquals(2, (int) map.get(\"int2\"));\r\n        assertEquals(2.0f, (double) map.get(\"float2\"), 0.001);\r\n    }\r\n```\r\n\r\nYou can read deeply nested config items as well by specifying the \r\nproperty path using dot notation. \r\n    \r\n#### Reading nested properties with dot notation\r\n\r\n\r\n```java\r\n    @Test\r\n    public void testSimplePath() throws Exception {\r\n\r\n        assertTrue(config.hasPath(\"configInner.int2\"));\r\n        assertFalse(config.hasPath(\"configInner.foo.bar\"));\r\n        assertEquals(2, config.getInt(\"configInner.int2\"));\r\n        assertEquals(2.0f, config.getFloat(\"configInner.float2\"), 0.001);\r\n    }\r\n```\r\n\r\nYou can also read POJOs directly out of the config file.\r\n\r\n#### Reading a pojo directly out of the config file\r\n```java\r\n\r\n    @Test\r\n    public void testReadClass() throws Exception {\r\n        final Employee employee = config.get(\"employee\", Employee.class);\r\n        assertEquals(\"Geoff\", employee.name);\r\n        assertEquals(\"123\", employee.id);\r\n    }\r\n\r\n```\r\n\r\nYou can read a list of POJOs at once.\r\n\r\n#### Reading a pojo list directly out of the config file\r\n```java\r\n\r\n    @Test\r\n    public void testReadListOfClass() throws Exception {\r\n        final List<Employee> employees = config.getList(\"employees\", Employee.class);\r\n        assertEquals(\"Geoff\", employees.get(0).name);\r\n        assertEquals(\"123\", employees.get(0).id);\r\n    }\r\n```\r\n\r\nYou can also read a list of config objects out of the config as well.\r\n#### Reading a config list directly out of the config file\r\n```java\r\n\r\n    @Test\r\n    public void testReadListOfConfig() throws Exception {\r\n        final List<Config> employees = config.getConfigList(\"employees\");\r\n        assertEquals(\"Geoff\", employees.get(0).getString(\"name\"));\r\n        assertEquals(\"123\", employees.get(0).getString(\"id\"));\r\n    }\r\n ```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}